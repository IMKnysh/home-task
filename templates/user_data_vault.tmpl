#!/usr/bin/env bash

mkdir -p /opt/vault/config
mkdir -p /opt/vault/tls/certs
mkdir -p /opt/vault/tls/private

export AWS_DEFAULT_REGION=${var.region}
inst_IP=`curl --silent --show-error --location http://169.254.169.254/latest/meta-data/local-ipv4/`

cat <<EOF > /opt/vault/config/server.hcl
ui = true
listener "tcp" {
  address = "127.0.0.1:8200"
  tls_cert_file = "/vault/tls/certs/vault.crt"
  tls_key_file  = "/vault/tls/private/vault.key"

}

listener "tcp" {
  address = "$inst_IP:8200"
  tls_cert_file = "/vault/tls/certs/vault.crt"
  tls_key_file  = "/vault/tls/private/vault.key"
}
storage "consul" {
  scheme        = "https"
  address = "$inst_IP:8501"
  tls_ca_file   = "/vault/tls/certs/ca-bundle.crt"
  tls_cert_file = "/vault/tls/certs/server.crt"
  tls_key_file  = "/vault/tls/private/vault.key"
  token   = "${var.consul_acl_vault_token}"
}
# Advertise the non-loopback interface
api_addr = "https://$inst_IP:8200"
cluster_addr = "https://$inst_IP:8201"
EOF


echo "${var.ca_public_key}" > /opt/vault/tls/certs/ca-bundle.crt
echo "${var.public_key}" > /opt/vault/tls/certs/server.crt
echo "${var.private_key}" > /opt/vault/tls/private/vault.key
echo "${var.public_key}" > /opt/vault/tls/certs/vault.crt
echo "${var.ca_public_key}" >> /opt/vault/tls/certs/vault.crt

docker run -d --restart always --net=host --cap-add=IPC_LOCK --name=vault-server -v /opt/vault:/vault vault server -log-level=debug

yum install -y jq

curl \
    --request PUT \
    --header "X-Consul-Token: ${var.consul_acl_master_token}" \
    --data \
    '{
  "ID": "${var.consul_acl_vault_token}",
  "Name": "Vault Token",
  "Type": "client",
  "Rules": "key \"vault/\" { policy = \"write\" } node \"\" { policy = \"write\" } service \"vault\" { policy = \"write\" } agent \"\" { policy = \"write\" } session \"\" { policy = \"write\" } "
   }' http://$inst_IP:8500/v1/acl/create

echo "Waiting Vault to launch on 8200..."

while ! nc -z $inst_IP 8200; do
  sleep 10 # wait for 10 second before check again
done

initialized_status=$(docker exec -t vault-server vault status -ca-cert=/vault/tls/certs/ca-bundle.crt -client-cert=/vault/tls/certs/server.crt -client-key=/vault/tls/private/vault.key -format=json -address=https://$inst_IP:8200 | jq -r .initialized)
if [[ $initialized_status == "false" ]]; then
      curl \
           --cacert /opt/vault/tls/certs/ca-bundle.crt \
           --cert /opt/vault/tls/certs/server.crt \
           --key /opt/vault/tls/private/vault.key \
           --request POST \
           --data '{"secret_shares": 5, "secret_threshold": 3}' https://$inst_IP:8200/v1/sys/init | tee \
               >(jq -r .root_token > /root/root_token) \
               >(jq -r .keys_base64[0] > /root/unseal_key1) >(jq -r .keys_base64[1] > /root/unseal_key2) >(jq -r .keys_base64[2] > /root/unseal_key3) \
               >(jq -r .keys_base64[3] > /root/unseal_key4) >(jq -r .keys_base64[4] > /root/unseal_key5)
      root_token=`cat /root/root_token`
      unseal_key1=`cat /root/unseal_key1`
      unseal_key2=`cat /root/unseal_key2`
      unseal_key3=`cat /root/unseal_key3`
      unseal_key4=`cat /root/unseal_key4`
      unseal_key5=`cat /root/unseal_key5`

      aws ssm put-parameter --name "/vault/root_token" --value $root_token --type SecureString --overwrite
      aws ssm put-parameter --name "/vault/unseal_key1" --value $unseal_key1 --type SecureString --overwrite
      aws ssm put-parameter --name "/vault/unseal_key2" --value $unseal_key2 --type SecureString --overwrite
      aws ssm put-parameter --name "/vault/unseal_key3" --value $unseal_key3 --type SecureString --overwrite
      aws ssm put-parameter --name "/vault/unseal_key4" --value $unseal_key4 --type SecureString --overwrite
      aws ssm put-parameter --name "/vault/unseal_key5" --value $unseal_key5 --type SecureString --overwrite
  done
fi


unseal_status=$(docker exec -t vault-server vault status -ca-cert=/vault/tls/certs/ca-bundle.crt -client-cert=/vault/tls/certs/server.crt -client-key=/vault/tls/private/vault.key -format=json -address=https://$inst_IP:8200 | jq -r .sealed)
if [[ $unseal_status == "true" ]]; then
  for i in {1..3}
    do
    key=$(aws ssm get-parameter --name "/vault/unseal_key$${i}" --with-decryption | jq -r .Parameter.Value)
    curl --cacert /opt/vault/tls/certs/ca-bundle.crt --cert /opt/vault/tls/certs/server.crt --key /opt/vault/tls/private/vault.key --request POST --data "{"'"key"':\""$key""\"}"  https://$inst_IP:8200/v1/sys/unseal
  done
fi

cat <<EOF > /opt/vault/unseal.sh
#!/usr/bin/env bash

export AWS_DEFAULT_REGION=${var.region}
inst_IP=`curl --silent --show-error --location http://169.254.169.254/latest/meta-data/local-ipv4/`
unseal_status=$(docker exec -t vault-server vault status -ca-cert=/vault/tls/certs/ca-bundle.crt -client-cert=/vault/tls/certs/server.crt -client-key=/vault/tls/private/vault.key -format=json -address=https://$inst_IP:8200 | jq -r .sealed)
if [[ $unseal_status == "true" ]]; then
  for i in {1..3}
    do
    key=$(aws ssm get-parameter --name "/vault/unseal_key$${i}" --with-decryption | jq -r .Parameter.Value)
    curl --cacert /opt/vault/tls/certs/ca-bundle.crt --cert /opt/vault/tls/certs/server.crt --key /opt/vault/tls/private/vault.key --request POST --data "{"'"key"':\""$key""\"}"  https://$inst_IP:8200/v1/sys/unseal
  done
fi
EOF
chmod a+x /opt/vault/unseal.sh

cat <<EOF >> /var/spool/cron/root
*/30 * * * * /opt/vault/unseal.sh
EOF

echo "#####################################################################"
echo "Finished with Vault..."
echo "#####################################################################"

